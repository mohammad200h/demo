<launch>
  <arg name="paused" default="false" />
  <arg name="use_sim_time" default="true" />
  <arg name="gui" default="true" />
  <arg name="headless" default="false" />
  <arg name="debug" default="false" />
  <arg name="verbose" default="false" />
  <arg name="hand_id" default="rh" />

  <!-- Gazebo world file to load. -->
  <arg name="world_name" value="$(find sr_description_common)/worlds/shadowhand.world"/>
  <!-- Set to 0 if the arm and hand description will not be specified with the arguments hand_description and arm_hand_description. In which case it depends on the environment variables -->
  <arg name="set_arm_hand_description" default="0" />
  <!-- Xacro file containing the robot description we want to load. Only taken into acount if the set_description arg is set to 1
       the default value -->
  <arg name="hand_description"
  default="$(find sr_description)/robots/shadowhand_motor.urdf.xacro" />
  <!-- Xacro file containing the robot description we want to load. Only taken into acount if the set_description arg is set to 1
       the default value -->
  <arg name="arm_hand_description"
  default="$(find sr_description)/robots/kuka_and_hand.urdf.xacro" />
  <!-- We want gazebo to stay in the root namespace but the nodes below to be
  relative. Can then launch this inside a namespace to namespace the hand. -->
  <group ns="/">
    <param name="gazebo/image_path"
    value="$(find sr_movements)/movements/test.png" />
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="paused" value="$(arg paused)" />
      <arg name="use_sim_time" value="$(arg use_sim_time)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="headless" value="$(arg headless)" />
      <arg name="debug" value="$(arg debug)" />
      <arg name="verbose" value="$(arg verbose)" />
      <arg name="world_name" value="$(arg world_name)" />
    </include>
  </group>
	
  <!-- spawn the support model -->
  <include file="$(find sr_description)/loaders/load_support_model.launch" />
  <node name="spawn_support" pkg="gazebo_ros" type="spawn_model"
  args="-urdf -param support_description -z 0.0 -model support_model"
  respawn="false" output="screen" />


  <!-- spawn the arm and hand model -->
  <group unless="$(arg set_arm_hand_description)">
    <!-- Loads the correct robot description depending on the environment variables -->
    <include file="$(find sr_description)/loaders/load_kuka_and_hand_model.launch" />
    <!-- Loads the correct robot description depending on the environment variables -->
    <include file="$(find sr_description)/loaders/load_hand_model.launch" />
  </group>
  <group if="$(arg set_arm_hand_description)">
    <!-- Loads the robot description from the file passed as an argument -->
    <param name="robot_description"
    command="xacro --inorder '$(arg arm_hand_description)'" />
    <!-- Loads the robot description from the file passed as an argument -->
    <param name="sh_description"
    command="xacro --inorder '$(arg hand_description)'" />
  </group>
  <node name="spawn_hand" pkg="gazebo_ros" type="spawn_model"
  args="-urdf -param robot_description -z 0.0 -model shadow_model -J ShoulderJSwing 0.78 -J ElbowJSwing 2.0"
  respawn="false" output="screen" />
  <!-- Controllers for the hand -->
   <include file="$(find sr_hand)/launch/gazebo/loaders/hand_controllers.launch" >
    <arg name="hand_id" value="$(arg hand_id)" />
  </include>
  <!-- launch trajectory controllers for the arm -->
  <!-- controller for kuka -->
	
   <!-- ===================================================================================== -->
    <!-- |    Lauch file to start Gazebo with an IIWA using various controllers.	         | -->
    
    <!-- |    It allows to customize the name of the robot, for each robot                   | -->
    <!-- |	  its topics will be under a nameespace with the same name as the robot's.       | -->
    
    <!-- |	  One can choose to have a joint trajectory controller or                        | -->
    <!-- |    controllers for the single joints, using the "trajectory" argument.            | -->
    <!-- ===================================================================================== -->
    
    <arg name="hardware_interface" default="PositionJointInterface" />
 
    <arg name="trajectory" default="true"/>
  
    <arg name="robot_name" default="iiwa" />
    <arg name="model" default="iiwa7"/>
    
    
    
    <!-- Spawn controllers - it uses a JointTrajectoryController -->
    <group  ns="$(arg robot_name)" if="$(arg trajectory)">
        
        <include file="$(find iiwa_control)/launch/kuka_hand_control.launch">
            <arg name="hardware_interface" value="$(arg hardware_interface)" />
            <arg name="controllers" value="joint_state_controller $(arg hardware_interface)_trajectory_controller" />
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="model" value="$(arg model)" />
        </include>
        
    </group>
    
    <!-- Spawn controllers - it uses an Effort Controller for each joint -->
    <group ns="$(arg robot_name)" unless="$(arg trajectory)">
        
        <include file="$(find iiwa_control)/launch/kuka_hand_control.launch">
            <arg name="hardware_interface" value="$(arg hardware_interface)" />
            <arg name="controllers" value="joint_state_controller
                 $(arg hardware_interface)_J1_controller
                 $(arg hardware_interface)_J2_controller
                 $(arg hardware_interface)_J3_controller
                 $(arg hardware_interface)_J4_controller
                 $(arg hardware_interface)_J5_controller
                 $(arg hardware_interface)_J6_controller
                 $(arg hardware_interface)_J7_controller"/>
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="model" value="$(arg model)" />
        </include>
        
    </group>
    
 
  <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch" />
  <node pkg="robot_state_publisher" type="state_publisher"
  name="robot_state_publisher_full_pos">
    <param name="publish_frequency" type="double" value="20.0" />
  </node>
</launch>
