<?xml version="1.0"?>
<launch>
    <!-- LAUNCH INTERFACE -->
    <arg name="hardware_interface" default="PositionJointInterface"/>
    
    <arg name="robot_name" default="handlit_left"/>
    <arg name="robot_description" default="$(find sr_description)/hand/xacro/handlit_left.urdf.xacro' hardware_interface:=$(arg hardware_interface) robot_name:=$(arg robot_name)" />
  
    <arg name="sim" default="true"/>
    <arg name="initial_z" default="0.01"/>
    
    <arg name="hand_serial" default="1658" />
    <arg name="hand_id" default="lh" />
    <arg name="eth_port" default="enp14s0" />
    <arg name="debug" value="false"/>
    <arg name="pwm_control" default="true"/>
    <arg name="mapping_path" default="$(find sr_edc_launch)/mappings/default_mappings/rh_lite_v1.yaml"/>
    <arg name="hand_trajectory" default="true"/>
    
    
    <group unless="$(arg sim)">
        <remap from="/sr_iiwa/joint_states" to="/joint_states"/>
        <arg name="controllers" default="$(arg hardware_interface)_trajectory_controller"/>
    
        <include file="$(find sr_edc_launch)/sr_edc_ros_control.launch">
          <arg name="debug" value="$(arg debug)"/>
          <arg name="eth_port" value="$(arg eth_port)"/>
          <arg name="robot_description" value="$(arg robot_description)"/>
          <arg name="pwm_control" value="$(arg pwm_control)"/>
          <arg name="hand_serial" value="$(arg hand_serial)"/>
          <arg name="hand_id" value="$(arg hand_id)"/>
          <arg name="mapping_path" value="$(arg mapping_path)"/>
          <arg name="initial_z" value="$(arg initial_z)"/>
        </include>
        
        <!-- <node name="$(arg hand_id)_trajectory_controller" pkg="sr_utilities" type="trajectory_controller_spawner.py" output="screen">
          <param name="hand_trajectory" value ="$(arg hand_trajectory)"/>
          <param name="wait_for" value ="/calibrated" unless="$(arg sim)"/>
        </node> -->
        
        <node name="$(arg hand_id)_grasp_controller" pkg="sr_utilities" type="grasp_controller_spawner.py" output="screen">
          <param name="wait_for" value ="/calibrated" unless="$(arg sim)"/>
        </node>

    </group>
    
    <group if="$(arg sim)">
        <arg name="controllers" default="$(arg robot_name)/$(arg hardware_interface)_trajectory_controller"/>
        <group ns="$(arg robot_name)">
            <rosparam command="load" file="$(find sat_iiwa_control)/config/sr_iiwa_joint_names.yaml" />
            <rosparam file="$(find sat_iiwa_control)/config/sr_iiwa_controller.yaml" command="load" />
        </group>
            
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
          output="screen" args="$(arg controllers) --shutdown-timeout 2" />
      
        <!-- Directly taken from srhand.launch -->
        <param name="/hand/mapping/$(arg hand_serial)" value="$(arg hand_id)"/>
        <param name="/hand/joint_prefix/$(arg hand_serial)" value="$(arg hand_id)_"/>
        <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch" />
        <!--rosparam command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_controller_gazebo.yaml"/-->
        <rosparam command="load" file="$(find sr_description)/hand/config/$(arg hand_id)_lite_grasp_controller_gazebo.yaml"/>


        <!-- Robot state publisher -->
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
          <param name="publish_frequency" type="double" value="200.0" />
          <param name="tf_prefix" type="string" value="" />
        </node>
        
        <!--node name="$(arg hand_id)_trajectory_controller" pkg="sr_utilities" type="trajectory_controller_spawner.py" output="screen">
          <param name="hand_trajectory" value ="true"/>
        </node-->

        <node name="$(arg hand_id)_grasp_controller" pkg="sr_utilities" type="grasp_controller_spawner.py" output="screen">
          <param name="wait_for" value ="/calibrated" unless="$(arg sim)"/>
        </node>
    </group>
    
</launch>
