# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/JointMuscleValveControllerCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointMuscleValveControllerCommand(genpy.Message):
  _md5sum = "1a35a9f185150fc2bca2640471eeb55f"
  _type = "sr_robot_msgs/JointMuscleValveControllerCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This command will allow the user to specify a separate command for each of the two muscles that control the joint.
# The user will also specify a duration in ms for that command. During this duration the command will be sent to the hand
# every ms. 
# Once this duration period has elapsed, a command of 0 will be sent to the muscle (meaning both the filling and emptying valves for that 
# muscle remain closed), until a new command is received
# A duration of 0 means that there is no timeout, so the valve command will be sent to the muscle until a different valve command is received.
# BE CAREFUL WHEN USING A DURATION OF 0 AS THIS COULD EVENTUALLY DAMAGE THE MUSCLE

# Allowed values for the cmd_valve_muscle are integers from -4 to +4.
# +4 the filling valve is open during a full ms cycle. Emptying valve is closed
# +3 the filling valve is open during 0.75 ms and closed during 0.25 ms in a 1 ms cycle. Emptying valve is closed
# +2 the filling valve is open during 0.5 ms and closed during 0.5 ms in a 1 ms cycle. Emptying valve is closed
# +1 the filling valve is open during 0.25 ms and closed during 0.75 ms in a 1 ms cycle. Emptying valve is closed
# 0 both valves (filling and emptying) remain closed in a 1 ms cycle
# ...
# -3 the emptying valve is open during 0.75 ms and closed during 0.25 ms in a 1 ms cycle. Filling valve is closed
# -4 the emptying valve is open during a full ms cycle. Filling valve is closed

int8[2] cmd_valve_muscle
uint64[2] cmd_duration_ms



"""
  __slots__ = ['cmd_valve_muscle','cmd_duration_ms']
  _slot_types = ['int8[2]','uint64[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_valve_muscle,cmd_duration_ms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointMuscleValveControllerCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_valve_muscle is None:
        self.cmd_valve_muscle = [0] * 2
      if self.cmd_duration_ms is None:
        self.cmd_duration_ms = [0] * 2
    else:
      self.cmd_valve_muscle = [0] * 2
      self.cmd_duration_ms = [0] * 2

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_2b().pack(*self.cmd_valve_muscle))
      buff.write(_get_struct_2Q().pack(*self.cmd_duration_ms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      self.cmd_valve_muscle = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 16
      self.cmd_duration_ms = _get_struct_2Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.cmd_valve_muscle.tostring())
      buff.write(self.cmd_duration_ms.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 2
      self.cmd_valve_muscle = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=2)
      start = end
      end += 16
      self.cmd_duration_ms = numpy.frombuffer(str[start:end], dtype=numpy.uint64, count=2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q = None
def _get_struct_2Q():
    global _struct_2Q
    if _struct_2Q is None:
        _struct_2Q = struct.Struct("<2Q")
    return _struct_2Q
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
