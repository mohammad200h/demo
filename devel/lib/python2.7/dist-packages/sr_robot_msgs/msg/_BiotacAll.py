# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/BiotacAll.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_robot_msgs.msg
import std_msgs.msg

class BiotacAll(genpy.Message):
  _md5sum = "e27dd065f854b80a2d092dd322ddfd40"
  _type = "sr_robot_msgs/BiotacAll"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
Biotac[5] tactiles
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sr_robot_msgs/Biotac
int16 pac0
int16 pac1
int16 pdc

int16 tac
int16 tdc

int16[] electrodes
"""
  __slots__ = ['header','tactiles']
  _slot_types = ['std_msgs/Header','sr_robot_msgs/Biotac[5]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tactiles

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BiotacAll, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tactiles is None:
        self.tactiles = [sr_robot_msgs.msg.Biotac() for _ in range(5)]
    else:
      self.header = std_msgs.msg.Header()
      self.tactiles = [sr_robot_msgs.msg.Biotac() for _ in range(5)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      if len(self.tactiles) != 5:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (5, len(self.tactiles), 'self.tactiles')))
      for val1 in self.tactiles:
        _x = val1
        buff.write(_get_struct_5h().pack(_x.pac0, _x.pac1, _x.pdc, _x.tac, _x.tdc))
        length = len(val1.electrodes)
        buff.write(_struct_I.pack(length))
        pattern = '<%sh'%length
        buff.write(struct.Struct(pattern).pack(*val1.electrodes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tactiles is None:
        self.tactiles = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      self.tactiles = []
      for i in range(0, 5):
        val1 = sr_robot_msgs.msg.Biotac()
        _x = val1
        start = end
        end += 10
        (_x.pac0, _x.pac1, _x.pdc, _x.tac, _x.tdc,) = _get_struct_5h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sh'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.electrodes = s.unpack(str[start:end])
        self.tactiles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      if len(self.tactiles) != 5:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (5, len(self.tactiles), 'self.tactiles')))
      for val1 in self.tactiles:
        _x = val1
        buff.write(_get_struct_5h().pack(_x.pac0, _x.pac1, _x.pdc, _x.tac, _x.tdc))
        length = len(val1.electrodes)
        buff.write(_struct_I.pack(length))
        pattern = '<%sh'%length
        buff.write(val1.electrodes.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tactiles is None:
        self.tactiles = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      self.tactiles = []
      for i in range(0, 5):
        val1 = sr_robot_msgs.msg.Biotac()
        _x = val1
        start = end
        end += 10
        (_x.pac0, _x.pac1, _x.pdc, _x.tac, _x.tdc,) = _get_struct_5h().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sh'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.electrodes = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
        self.tactiles.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5h = None
def _get_struct_5h():
    global _struct_5h
    if _struct_5h is None:
        _struct_5h = struct.Struct("<5h")
    return _struct_5h
