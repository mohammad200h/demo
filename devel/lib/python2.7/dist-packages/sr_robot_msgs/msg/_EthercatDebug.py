# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/EthercatDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_robot_msgs.msg
import std_msgs.msg

class EthercatDebug(genpy.Message):
  _md5sum = "ed9e30784a7d4571ecf4d526e7ff529f"
  _type = "sr_robot_msgs/EthercatDebug"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header               header

int16[]              sensors
FromMotorDataType    motor_data_type
int16                which_motors
int32                which_motor_data_arrived
int32                which_motor_data_had_errors
int16[]              motor_data_packet_torque
int16[]              motor_data_packet_misc
int32                tactile_data_type
int16                tactile_data_valid
int16[]              tactile
int16                idle_time_us

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sr_robot_msgs/FromMotorDataType
int16 data"""
  __slots__ = ['header','sensors','motor_data_type','which_motors','which_motor_data_arrived','which_motor_data_had_errors','motor_data_packet_torque','motor_data_packet_misc','tactile_data_type','tactile_data_valid','tactile','idle_time_us']
  _slot_types = ['std_msgs/Header','int16[]','sr_robot_msgs/FromMotorDataType','int16','int32','int32','int16[]','int16[]','int32','int16','int16[]','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sensors,motor_data_type,which_motors,which_motor_data_arrived,which_motor_data_had_errors,motor_data_packet_torque,motor_data_packet_misc,tactile_data_type,tactile_data_valid,tactile,idle_time_us

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EthercatDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensors is None:
        self.sensors = []
      if self.motor_data_type is None:
        self.motor_data_type = sr_robot_msgs.msg.FromMotorDataType()
      if self.which_motors is None:
        self.which_motors = 0
      if self.which_motor_data_arrived is None:
        self.which_motor_data_arrived = 0
      if self.which_motor_data_had_errors is None:
        self.which_motor_data_had_errors = 0
      if self.motor_data_packet_torque is None:
        self.motor_data_packet_torque = []
      if self.motor_data_packet_misc is None:
        self.motor_data_packet_misc = []
      if self.tactile_data_type is None:
        self.tactile_data_type = 0
      if self.tactile_data_valid is None:
        self.tactile_data_valid = 0
      if self.tactile is None:
        self.tactile = []
      if self.idle_time_us is None:
        self.idle_time_us = 0
    else:
      self.header = std_msgs.msg.Header()
      self.sensors = []
      self.motor_data_type = sr_robot_msgs.msg.FromMotorDataType()
      self.which_motors = 0
      self.which_motor_data_arrived = 0
      self.which_motor_data_had_errors = 0
      self.motor_data_packet_torque = []
      self.motor_data_packet_misc = []
      self.tactile_data_type = 0
      self.tactile_data_valid = 0
      self.tactile = []
      self.idle_time_us = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.sensors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.sensors))
      _x = self
      buff.write(_get_struct_2h2i().pack(_x.motor_data_type.data, _x.which_motors, _x.which_motor_data_arrived, _x.which_motor_data_had_errors))
      length = len(self.motor_data_packet_torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.motor_data_packet_torque))
      length = len(self.motor_data_packet_misc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.motor_data_packet_misc))
      _x = self
      buff.write(_get_struct_ih().pack(_x.tactile_data_type, _x.tactile_data_valid))
      length = len(self.tactile)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.tactile))
      _x = self.idle_time_us
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.motor_data_type is None:
        self.motor_data_type = sr_robot_msgs.msg.FromMotorDataType()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensors = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.motor_data_type.data, _x.which_motors, _x.which_motor_data_arrived, _x.which_motor_data_had_errors,) = _get_struct_2h2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motor_data_packet_torque = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motor_data_packet_misc = s.unpack(str[start:end])
      _x = self
      start = end
      end += 6
      (_x.tactile_data_type, _x.tactile_data_valid,) = _get_struct_ih().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tactile = s.unpack(str[start:end])
      start = end
      end += 2
      (self.idle_time_us,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.sensors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.sensors.tostring())
      _x = self
      buff.write(_get_struct_2h2i().pack(_x.motor_data_type.data, _x.which_motors, _x.which_motor_data_arrived, _x.which_motor_data_had_errors))
      length = len(self.motor_data_packet_torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.motor_data_packet_torque.tostring())
      length = len(self.motor_data_packet_misc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.motor_data_packet_misc.tostring())
      _x = self
      buff.write(_get_struct_ih().pack(_x.tactile_data_type, _x.tactile_data_valid))
      length = len(self.tactile)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.tactile.tostring())
      _x = self.idle_time_us
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.motor_data_type is None:
        self.motor_data_type = sr_robot_msgs.msg.FromMotorDataType()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensors = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 12
      (_x.motor_data_type.data, _x.which_motors, _x.which_motor_data_arrived, _x.which_motor_data_had_errors,) = _get_struct_2h2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motor_data_packet_torque = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.motor_data_packet_misc = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 6
      (_x.tactile_data_type, _x.tactile_data_valid,) = _get_struct_ih().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tactile = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 2
      (self.idle_time_us,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h2i = None
def _get_struct_2h2i():
    global _struct_2h2i
    if _struct_2h2i is None:
        _struct_2h2i = struct.Struct("<2h2i")
    return _struct_2h2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_ih = None
def _get_struct_ih():
    global _struct_ih
    if _struct_ih is None:
        _struct_ih = struct.Struct("<ih")
    return _struct_ih
