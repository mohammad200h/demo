# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/cartesian_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_robot_msgs.msg

class cartesian_data(genpy.Message):
  _md5sum = "0efe699b2863e30a84ffabfdca8dfb19"
  _type = "sr_robot_msgs/cartesian_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8                 cartesian_positions_length
cartesian_position[] cartesian_positions

================================================================================
MSG: sr_robot_msgs/cartesian_position
string  tip_name
float32 tip_pos_x
float32 tip_pos_y
float32 tip_pos_z
float32 tip_orientation_rho
float32 tip_orientation_theta
float32 tip_orientation_sigma

"""
  __slots__ = ['cartesian_positions_length','cartesian_positions']
  _slot_types = ['int8','sr_robot_msgs/cartesian_position[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cartesian_positions_length,cartesian_positions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cartesian_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cartesian_positions_length is None:
        self.cartesian_positions_length = 0
      if self.cartesian_positions is None:
        self.cartesian_positions = []
    else:
      self.cartesian_positions_length = 0
      self.cartesian_positions = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cartesian_positions_length
      buff.write(_get_struct_b().pack(_x))
      length = len(self.cartesian_positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.cartesian_positions:
        _x = val1.tip_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6f().pack(_x.tip_pos_x, _x.tip_pos_y, _x.tip_pos_z, _x.tip_orientation_rho, _x.tip_orientation_theta, _x.tip_orientation_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cartesian_positions is None:
        self.cartesian_positions = None
      end = 0
      start = end
      end += 1
      (self.cartesian_positions_length,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cartesian_positions = []
      for i in range(0, length):
        val1 = sr_robot_msgs.msg.cartesian_position()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.tip_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.tip_name = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.tip_pos_x, _x.tip_pos_y, _x.tip_pos_z, _x.tip_orientation_rho, _x.tip_orientation_theta, _x.tip_orientation_sigma,) = _get_struct_6f().unpack(str[start:end])
        self.cartesian_positions.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cartesian_positions_length
      buff.write(_get_struct_b().pack(_x))
      length = len(self.cartesian_positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.cartesian_positions:
        _x = val1.tip_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_6f().pack(_x.tip_pos_x, _x.tip_pos_y, _x.tip_pos_z, _x.tip_orientation_rho, _x.tip_orientation_theta, _x.tip_orientation_sigma))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cartesian_positions is None:
        self.cartesian_positions = None
      end = 0
      start = end
      end += 1
      (self.cartesian_positions_length,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cartesian_positions = []
      for i in range(0, length):
        val1 = sr_robot_msgs.msg.cartesian_position()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.tip_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.tip_name = str[start:end]
        _x = val1
        start = end
        end += 24
        (_x.tip_pos_x, _x.tip_pos_y, _x.tip_pos_z, _x.tip_orientation_rho, _x.tip_orientation_theta, _x.tip_orientation_sigma,) = _get_struct_6f().unpack(str[start:end])
        self.cartesian_positions.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
