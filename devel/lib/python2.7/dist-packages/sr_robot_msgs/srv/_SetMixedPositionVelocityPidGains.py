# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/SetMixedPositionVelocityPidGainsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetMixedPositionVelocityPidGainsRequest(genpy.Message):
  _md5sum = "ff95ce4d442c9454d3d943f0c999da89"
  _type = "sr_robot_msgs/SetMixedPositionVelocityPidGainsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 position_p
float64 position_i
float64 position_d
float64 position_i_clamp
float64 min_velocity
float64 max_velocity
float64 position_deadband

float64 velocity_p
float64 velocity_i
float64 velocity_d
float64 velocity_i_clamp
float64 max_force

int32 friction_deadband
"""
  __slots__ = ['position_p','position_i','position_d','position_i_clamp','min_velocity','max_velocity','position_deadband','velocity_p','velocity_i','velocity_d','velocity_i_clamp','max_force','friction_deadband']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_p,position_i,position_d,position_i_clamp,min_velocity,max_velocity,position_deadband,velocity_p,velocity_i,velocity_d,velocity_i_clamp,max_force,friction_deadband

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetMixedPositionVelocityPidGainsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position_p is None:
        self.position_p = 0.
      if self.position_i is None:
        self.position_i = 0.
      if self.position_d is None:
        self.position_d = 0.
      if self.position_i_clamp is None:
        self.position_i_clamp = 0.
      if self.min_velocity is None:
        self.min_velocity = 0.
      if self.max_velocity is None:
        self.max_velocity = 0.
      if self.position_deadband is None:
        self.position_deadband = 0.
      if self.velocity_p is None:
        self.velocity_p = 0.
      if self.velocity_i is None:
        self.velocity_i = 0.
      if self.velocity_d is None:
        self.velocity_d = 0.
      if self.velocity_i_clamp is None:
        self.velocity_i_clamp = 0.
      if self.max_force is None:
        self.max_force = 0.
      if self.friction_deadband is None:
        self.friction_deadband = 0
    else:
      self.position_p = 0.
      self.position_i = 0.
      self.position_d = 0.
      self.position_i_clamp = 0.
      self.min_velocity = 0.
      self.max_velocity = 0.
      self.position_deadband = 0.
      self.velocity_p = 0.
      self.velocity_i = 0.
      self.velocity_d = 0.
      self.velocity_i_clamp = 0.
      self.max_force = 0.
      self.friction_deadband = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12di().pack(_x.position_p, _x.position_i, _x.position_d, _x.position_i_clamp, _x.min_velocity, _x.max_velocity, _x.position_deadband, _x.velocity_p, _x.velocity_i, _x.velocity_d, _x.velocity_i_clamp, _x.max_force, _x.friction_deadband))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 100
      (_x.position_p, _x.position_i, _x.position_d, _x.position_i_clamp, _x.min_velocity, _x.max_velocity, _x.position_deadband, _x.velocity_p, _x.velocity_i, _x.velocity_d, _x.velocity_i_clamp, _x.max_force, _x.friction_deadband,) = _get_struct_12di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12di().pack(_x.position_p, _x.position_i, _x.position_d, _x.position_i_clamp, _x.min_velocity, _x.max_velocity, _x.position_deadband, _x.velocity_p, _x.velocity_i, _x.velocity_d, _x.velocity_i_clamp, _x.max_force, _x.friction_deadband))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 100
      (_x.position_p, _x.position_i, _x.position_d, _x.position_i_clamp, _x.min_velocity, _x.max_velocity, _x.position_deadband, _x.velocity_p, _x.velocity_i, _x.velocity_d, _x.velocity_i_clamp, _x.max_force, _x.friction_deadband,) = _get_struct_12di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12di = None
def _get_struct_12di():
    global _struct_12di
    if _struct_12di is None:
        _struct_12di = struct.Struct("<12di")
    return _struct_12di
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/SetMixedPositionVelocityPidGainsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetMixedPositionVelocityPidGainsResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "sr_robot_msgs/SetMixedPositionVelocityPidGainsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetMixedPositionVelocityPidGainsResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class SetMixedPositionVelocityPidGains(object):
  _type          = 'sr_robot_msgs/SetMixedPositionVelocityPidGains'
  _md5sum = 'ff95ce4d442c9454d3d943f0c999da89'
  _request_class  = SetMixedPositionVelocityPidGainsRequest
  _response_class = SetMixedPositionVelocityPidGainsResponse
