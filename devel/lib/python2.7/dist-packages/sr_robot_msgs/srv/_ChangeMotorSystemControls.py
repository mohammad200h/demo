# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/ChangeMotorSystemControlsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_robot_msgs.msg

class ChangeMotorSystemControlsRequest(genpy.Message):
  _md5sum = "6458c2239125c960f4d1ef4d23696a1e"
  _type = "sr_robot_msgs/ChangeMotorSystemControlsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """MotorSystemControls[] motor_system_controls

================================================================================
MSG: sr_robot_msgs/MotorSystemControls
int8 motor_id                     # the id of the motor you want to control

bool enable_backlash_compensation # switch on/off backlash compensation at the motor level
bool increase_sgl_tracking        # increment the tracking value for the left gauge
bool decrease_sgl_tracking        # decrement the tracking value for the left gauge
bool increase_sgr_tracking        # increment the tracking value for the right gauge
bool decrease_sgr_tracking        # decrement the tracking value for the right gauge
bool initiate_jiggling            # starts jiggling the given motor
bool write_config_to_eeprom       # write the current configuration to the eeprom"""
  __slots__ = ['motor_system_controls']
  _slot_types = ['sr_robot_msgs/MotorSystemControls[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_system_controls

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChangeMotorSystemControlsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motor_system_controls is None:
        self.motor_system_controls = []
    else:
      self.motor_system_controls = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.motor_system_controls)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor_system_controls:
        _x = val1
        buff.write(_get_struct_b7B().pack(_x.motor_id, _x.enable_backlash_compensation, _x.increase_sgl_tracking, _x.decrease_sgl_tracking, _x.increase_sgr_tracking, _x.decrease_sgr_tracking, _x.initiate_jiggling, _x.write_config_to_eeprom))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor_system_controls is None:
        self.motor_system_controls = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor_system_controls = []
      for i in range(0, length):
        val1 = sr_robot_msgs.msg.MotorSystemControls()
        _x = val1
        start = end
        end += 8
        (_x.motor_id, _x.enable_backlash_compensation, _x.increase_sgl_tracking, _x.decrease_sgl_tracking, _x.increase_sgr_tracking, _x.decrease_sgr_tracking, _x.initiate_jiggling, _x.write_config_to_eeprom,) = _get_struct_b7B().unpack(str[start:end])
        val1.enable_backlash_compensation = bool(val1.enable_backlash_compensation)
        val1.increase_sgl_tracking = bool(val1.increase_sgl_tracking)
        val1.decrease_sgl_tracking = bool(val1.decrease_sgl_tracking)
        val1.increase_sgr_tracking = bool(val1.increase_sgr_tracking)
        val1.decrease_sgr_tracking = bool(val1.decrease_sgr_tracking)
        val1.initiate_jiggling = bool(val1.initiate_jiggling)
        val1.write_config_to_eeprom = bool(val1.write_config_to_eeprom)
        self.motor_system_controls.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.motor_system_controls)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor_system_controls:
        _x = val1
        buff.write(_get_struct_b7B().pack(_x.motor_id, _x.enable_backlash_compensation, _x.increase_sgl_tracking, _x.decrease_sgl_tracking, _x.increase_sgr_tracking, _x.decrease_sgr_tracking, _x.initiate_jiggling, _x.write_config_to_eeprom))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor_system_controls is None:
        self.motor_system_controls = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor_system_controls = []
      for i in range(0, length):
        val1 = sr_robot_msgs.msg.MotorSystemControls()
        _x = val1
        start = end
        end += 8
        (_x.motor_id, _x.enable_backlash_compensation, _x.increase_sgl_tracking, _x.decrease_sgl_tracking, _x.increase_sgr_tracking, _x.decrease_sgr_tracking, _x.initiate_jiggling, _x.write_config_to_eeprom,) = _get_struct_b7B().unpack(str[start:end])
        val1.enable_backlash_compensation = bool(val1.enable_backlash_compensation)
        val1.increase_sgl_tracking = bool(val1.increase_sgl_tracking)
        val1.decrease_sgl_tracking = bool(val1.decrease_sgl_tracking)
        val1.increase_sgr_tracking = bool(val1.increase_sgr_tracking)
        val1.decrease_sgr_tracking = bool(val1.decrease_sgr_tracking)
        val1.initiate_jiggling = bool(val1.initiate_jiggling)
        val1.write_config_to_eeprom = bool(val1.write_config_to_eeprom)
        self.motor_system_controls.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b7B = None
def _get_struct_b7B():
    global _struct_b7B
    if _struct_b7B is None:
        _struct_b7B = struct.Struct("<b7B")
    return _struct_b7B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/ChangeMotorSystemControlsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ChangeMotorSystemControlsResponse(genpy.Message):
  _md5sum = "5dade9e97a517a3f230ed76028e54c71"
  _type = "sr_robot_msgs/ChangeMotorSystemControlsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 result

int8 SUCCESS=0
int8 MOTOR_ID_OUT_OF_RANGE=-1
"""
  # Pseudo-constants
  SUCCESS = 0
  MOTOR_ID_OUT_OF_RANGE = -1

  __slots__ = ['result']
  _slot_types = ['int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChangeMotorSystemControlsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class ChangeMotorSystemControls(object):
  _type          = 'sr_robot_msgs/ChangeMotorSystemControls'
  _md5sum = 'd953bca2f568403b8e2c3f41c87d9ac4'
  _request_class  = ChangeMotorSystemControlsRequest
  _response_class = ChangeMotorSystemControlsResponse
