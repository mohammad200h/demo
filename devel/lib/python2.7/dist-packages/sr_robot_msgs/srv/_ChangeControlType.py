# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/ChangeControlTypeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_robot_msgs.msg

class ChangeControlTypeRequest(genpy.Message):
  _md5sum = "36741247c0d6032654e8e0ef56e7670f"
  _type = "sr_robot_msgs/ChangeControlTypeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ControlType control_type

================================================================================
MSG: sr_robot_msgs/ControlType
int16 control_type

int16 PWM=0
int16 FORCE=1

#used to query which control type we're using. won't change the control type
int16 QUERY=-1"""
  __slots__ = ['control_type']
  _slot_types = ['sr_robot_msgs/ControlType']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChangeControlTypeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.control_type is None:
        self.control_type = sr_robot_msgs.msg.ControlType()
    else:
      self.control_type = sr_robot_msgs.msg.ControlType()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.control_type.control_type
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.control_type is None:
        self.control_type = sr_robot_msgs.msg.ControlType()
      end = 0
      start = end
      end += 2
      (self.control_type.control_type,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.control_type.control_type
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.control_type is None:
        self.control_type = sr_robot_msgs.msg.ControlType()
      end = 0
      start = end
      end += 2
      (self.control_type.control_type,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_robot_msgs/ChangeControlTypeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_robot_msgs.msg

class ChangeControlTypeResponse(genpy.Message):
  _md5sum = "2a6d00c524e195eb671dbbbb7783aee1"
  _type = "sr_robot_msgs/ChangeControlTypeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ControlType result

================================================================================
MSG: sr_robot_msgs/ControlType
int16 control_type

int16 PWM=0
int16 FORCE=1

#used to query which control type we're using. won't change the control type
int16 QUERY=-1"""
  __slots__ = ['result']
  _slot_types = ['sr_robot_msgs/ControlType']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChangeControlTypeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = sr_robot_msgs.msg.ControlType()
    else:
      self.result = sr_robot_msgs.msg.ControlType()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result.control_type
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.result is None:
        self.result = sr_robot_msgs.msg.ControlType()
      end = 0
      start = end
      end += 2
      (self.result.control_type,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result.control_type
      buff.write(_get_struct_h().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.result is None:
        self.result = sr_robot_msgs.msg.ControlType()
      end = 0
      start = end
      end += 2
      (self.result.control_type,) = _get_struct_h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
class ChangeControlType(object):
  _type          = 'sr_robot_msgs/ChangeControlType'
  _md5sum = '14cedf5030b722e2c8df2dc57f9cdb58'
  _request_class  = ChangeControlTypeRequest
  _response_class = ChangeControlTypeResponse
