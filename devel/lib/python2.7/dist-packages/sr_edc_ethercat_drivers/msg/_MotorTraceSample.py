# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_edc_ethercat_drivers/MotorTraceSample.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorTraceSample(genpy.Message):
  _md5sum = "f5faf420d7c29e68b1c6bfdff440ffb8"
  _type = "sr_edc_ethercat_drivers/MotorTraceSample"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 commanded_effort
float64 slow_effort_limit
float64 quick_effort_limit
float64 motor_current
float64 motor_supply_voltage
float64 hbridge_duty
float64 temperature
float64 force_sensor_1
float64 force_sensor_2
float64 force_sensor_3
float64 motor_velocity
float64 velocity
float64 position
"""
  __slots__ = ['commanded_effort','slow_effort_limit','quick_effort_limit','motor_current','motor_supply_voltage','hbridge_duty','temperature','force_sensor_1','force_sensor_2','force_sensor_3','motor_velocity','velocity','position']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       commanded_effort,slow_effort_limit,quick_effort_limit,motor_current,motor_supply_voltage,hbridge_duty,temperature,force_sensor_1,force_sensor_2,force_sensor_3,motor_velocity,velocity,position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorTraceSample, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.commanded_effort is None:
        self.commanded_effort = 0.
      if self.slow_effort_limit is None:
        self.slow_effort_limit = 0.
      if self.quick_effort_limit is None:
        self.quick_effort_limit = 0.
      if self.motor_current is None:
        self.motor_current = 0.
      if self.motor_supply_voltage is None:
        self.motor_supply_voltage = 0.
      if self.hbridge_duty is None:
        self.hbridge_duty = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.force_sensor_1 is None:
        self.force_sensor_1 = 0.
      if self.force_sensor_2 is None:
        self.force_sensor_2 = 0.
      if self.force_sensor_3 is None:
        self.force_sensor_3 = 0.
      if self.motor_velocity is None:
        self.motor_velocity = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.position is None:
        self.position = 0.
    else:
      self.commanded_effort = 0.
      self.slow_effort_limit = 0.
      self.quick_effort_limit = 0.
      self.motor_current = 0.
      self.motor_supply_voltage = 0.
      self.hbridge_duty = 0.
      self.temperature = 0.
      self.force_sensor_1 = 0.
      self.force_sensor_2 = 0.
      self.force_sensor_3 = 0.
      self.motor_velocity = 0.
      self.velocity = 0.
      self.position = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13d().pack(_x.commanded_effort, _x.slow_effort_limit, _x.quick_effort_limit, _x.motor_current, _x.motor_supply_voltage, _x.hbridge_duty, _x.temperature, _x.force_sensor_1, _x.force_sensor_2, _x.force_sensor_3, _x.motor_velocity, _x.velocity, _x.position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.commanded_effort, _x.slow_effort_limit, _x.quick_effort_limit, _x.motor_current, _x.motor_supply_voltage, _x.hbridge_duty, _x.temperature, _x.force_sensor_1, _x.force_sensor_2, _x.force_sensor_3, _x.motor_velocity, _x.velocity, _x.position,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13d().pack(_x.commanded_effort, _x.slow_effort_limit, _x.quick_effort_limit, _x.motor_current, _x.motor_supply_voltage, _x.hbridge_duty, _x.temperature, _x.force_sensor_1, _x.force_sensor_2, _x.force_sensor_3, _x.motor_velocity, _x.velocity, _x.position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.commanded_effort, _x.slow_effort_limit, _x.quick_effort_limit, _x.motor_current, _x.motor_supply_voltage, _x.hbridge_duty, _x.temperature, _x.force_sensor_1, _x.force_sensor_2, _x.force_sensor_3, _x.motor_velocity, _x.velocity, _x.position,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
