# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sr_edc_ethercat_drivers/MotorTrace.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sr_edc_ethercat_drivers.msg
import std_msgs.msg

class MotorTrace(genpy.Message):
  _md5sum = "d06300e55fe6989d2795bc4072205fe1"
  _type = "sr_edc_ethercat_drivers/MotorTrace"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
string reason
sr_edc_ethercat_drivers/ActuatorInfo actuator_info
sr_edc_ethercat_drivers/MotorTraceSample[] samples

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sr_edc_ethercat_drivers/ActuatorInfo
string name
float64 slow_motor_current_limit
float64 quick_motor_current_limit
float64 duty_limit
float64 max_duty
================================================================================
MSG: sr_edc_ethercat_drivers/MotorTraceSample
float64 commanded_effort
float64 slow_effort_limit
float64 quick_effort_limit
float64 motor_current
float64 motor_supply_voltage
float64 hbridge_duty
float64 temperature
float64 force_sensor_1
float64 force_sensor_2
float64 force_sensor_3
float64 motor_velocity
float64 velocity
float64 position
"""
  __slots__ = ['header','reason','actuator_info','samples']
  _slot_types = ['std_msgs/Header','string','sr_edc_ethercat_drivers/ActuatorInfo','sr_edc_ethercat_drivers/MotorTraceSample[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,reason,actuator_info,samples

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorTrace, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.reason is None:
        self.reason = ''
      if self.actuator_info is None:
        self.actuator_info = sr_edc_ethercat_drivers.msg.ActuatorInfo()
      if self.samples is None:
        self.samples = []
    else:
      self.header = std_msgs.msg.Header()
      self.reason = ''
      self.actuator_info = sr_edc_ethercat_drivers.msg.ActuatorInfo()
      self.samples = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.actuator_info.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.actuator_info.slow_motor_current_limit, _x.actuator_info.quick_motor_current_limit, _x.actuator_info.duty_limit, _x.actuator_info.max_duty))
      length = len(self.samples)
      buff.write(_struct_I.pack(length))
      for val1 in self.samples:
        _x = val1
        buff.write(_get_struct_13d().pack(_x.commanded_effort, _x.slow_effort_limit, _x.quick_effort_limit, _x.motor_current, _x.motor_supply_voltage, _x.hbridge_duty, _x.temperature, _x.force_sensor_1, _x.force_sensor_2, _x.force_sensor_3, _x.motor_velocity, _x.velocity, _x.position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.actuator_info is None:
        self.actuator_info = sr_edc_ethercat_drivers.msg.ActuatorInfo()
      if self.samples is None:
        self.samples = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actuator_info.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.actuator_info.name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.actuator_info.slow_motor_current_limit, _x.actuator_info.quick_motor_current_limit, _x.actuator_info.duty_limit, _x.actuator_info.max_duty,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.samples = []
      for i in range(0, length):
        val1 = sr_edc_ethercat_drivers.msg.MotorTraceSample()
        _x = val1
        start = end
        end += 104
        (_x.commanded_effort, _x.slow_effort_limit, _x.quick_effort_limit, _x.motor_current, _x.motor_supply_voltage, _x.hbridge_duty, _x.temperature, _x.force_sensor_1, _x.force_sensor_2, _x.force_sensor_3, _x.motor_velocity, _x.velocity, _x.position,) = _get_struct_13d().unpack(str[start:end])
        self.samples.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.actuator_info.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.actuator_info.slow_motor_current_limit, _x.actuator_info.quick_motor_current_limit, _x.actuator_info.duty_limit, _x.actuator_info.max_duty))
      length = len(self.samples)
      buff.write(_struct_I.pack(length))
      for val1 in self.samples:
        _x = val1
        buff.write(_get_struct_13d().pack(_x.commanded_effort, _x.slow_effort_limit, _x.quick_effort_limit, _x.motor_current, _x.motor_supply_voltage, _x.hbridge_duty, _x.temperature, _x.force_sensor_1, _x.force_sensor_2, _x.force_sensor_3, _x.motor_velocity, _x.velocity, _x.position))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.actuator_info is None:
        self.actuator_info = sr_edc_ethercat_drivers.msg.ActuatorInfo()
      if self.samples is None:
        self.samples = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.reason = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.actuator_info.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.actuator_info.name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.actuator_info.slow_motor_current_limit, _x.actuator_info.quick_motor_current_limit, _x.actuator_info.duty_limit, _x.actuator_info.max_duty,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.samples = []
      for i in range(0, length):
        val1 = sr_edc_ethercat_drivers.msg.MotorTraceSample()
        _x = val1
        start = end
        end += 104
        (_x.commanded_effort, _x.slow_effort_limit, _x.quick_effort_limit, _x.motor_current, _x.motor_supply_voltage, _x.hbridge_duty, _x.temperature, _x.force_sensor_1, _x.force_sensor_2, _x.force_sensor_3, _x.motor_velocity, _x.velocity, _x.position,) = _get_struct_13d().unpack(str[start:end])
        self.samples.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
