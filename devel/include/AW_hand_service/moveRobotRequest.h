// Generated by gencpp from file AW_hand_service/moveRobotRequest.msg
// DO NOT EDIT!


#ifndef AW_HAND_SERVICE_MESSAGE_MOVEROBOTREQUEST_H
#define AW_HAND_SERVICE_MESSAGE_MOVEROBOTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace AW_hand_service
{
template <class ContainerAllocator>
struct moveRobotRequest_
{
  typedef moveRobotRequest_<ContainerAllocator> Type;

  moveRobotRequest_()
    : obj_x(0.0)
    , obj_y(0.0)
    , obj_z(0.0)  {
    }
  moveRobotRequest_(const ContainerAllocator& _alloc)
    : obj_x(0.0)
    , obj_y(0.0)
    , obj_z(0.0)  {
  (void)_alloc;
    }



   typedef double _obj_x_type;
  _obj_x_type obj_x;

   typedef double _obj_y_type;
  _obj_y_type obj_y;

   typedef double _obj_z_type;
  _obj_z_type obj_z;





  typedef boost::shared_ptr< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct moveRobotRequest_

typedef ::AW_hand_service::moveRobotRequest_<std::allocator<void> > moveRobotRequest;

typedef boost::shared_ptr< ::AW_hand_service::moveRobotRequest > moveRobotRequestPtr;
typedef boost::shared_ptr< ::AW_hand_service::moveRobotRequest const> moveRobotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::AW_hand_service::moveRobotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace AW_hand_service

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ee63385c214e38ca46f0e8b25b9b4dc";
  }

  static const char* value(const ::AW_hand_service::moveRobotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ee63385c214e38cULL;
  static const uint64_t static_value2 = 0xa46f0e8b25b9b4dcULL;
};

template<class ContainerAllocator>
struct DataType< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AW_hand_service/moveRobotRequest";
  }

  static const char* value(const ::AW_hand_service::moveRobotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 obj_x\n\
float64 obj_y\n\
float64 obj_z\n\
";
  }

  static const char* value(const ::AW_hand_service::moveRobotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_x);
      stream.next(m.obj_y);
      stream.next(m.obj_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct moveRobotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AW_hand_service::moveRobotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::AW_hand_service::moveRobotRequest_<ContainerAllocator>& v)
  {
    s << indent << "obj_x: ";
    Printer<double>::stream(s, indent + "  ", v.obj_x);
    s << indent << "obj_y: ";
    Printer<double>::stream(s, indent + "  ", v.obj_y);
    s << indent << "obj_z: ";
    Printer<double>::stream(s, indent + "  ", v.obj_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AW_HAND_SERVICE_MESSAGE_MOVEROBOTREQUEST_H
